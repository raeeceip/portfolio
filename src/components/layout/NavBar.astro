---
import { Icon } from "astro-icon/components";
---

<style>
  .nav-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background-color: var(--notebook-paper-color);
    backdrop-filter: blur(8px);
    border-bottom: 1px dashed rgba(81, 115, 63, 0.4);
    transition: background-color 0.3s ease, border-color 0.3s ease;
    
    /* Notebook paper design */
    background-image: 
      repeating-linear-gradient(
        transparent,
        transparent 1px,
        var(--notebook-line-color) 1px,
        var(--notebook-line-color) 2px,
        transparent 2px,
        transparent 24px
      ),
      linear-gradient(
        to right,
        var(--notebook-margin-color) 30px,
        transparent 30px
      );
    background-size: 100% 24px, 100% 100%;
    box-shadow: 0 2px 8px rgba(81, 115, 63, 0.1);
  }
  
  .dark .nav-container {
    border-bottom: 1px dashed rgba(255, 255, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* Left side binding holes */
  .nav-container::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 15px;
    transform: translateY(-50%);
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(
        circle at 0 25%, 
        var(--notebook-holes-color) 0, 
        var(--notebook-holes-color) 4px, 
        transparent 4px
      ),
      radial-gradient(
        circle at 0 50%, 
        var(--notebook-holes-color) 0, 
        var(--notebook-holes-color) 4px, 
        transparent 4px
      ),
      radial-gradient(
        circle at 0 75%, 
        var(--notebook-holes-color) 0, 
        var(--notebook-holes-color) 4px, 
        transparent 4px
      );
    background-size: 10px 33.33%;
    background-repeat: no-repeat;
    z-index: 1;
    pointer-events: none;
  }
  
  .nav-link {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.35rem;
    font-family: var(--handwriting-font);
    font-weight: 500;
    padding: 0.5rem 0;
    text-decoration: none;
    color: theme("colors.primary.700");
    transition: all 0.3s ease;
    transform: rotate(-0.5deg);
  }
  
  .nav-icon {
    color: theme("colors.primary.600");
    width: 1.25rem;
    height: 1.25rem;
  }
  
  .dark .nav-icon {
    /* color: white; - Removed as it's defined in contrast.css */
  }
  
  .dark .nav-link {
    /* color: white; - Removed as it's defined in contrast.css */
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
    opacity: 0.7;
  }
  
  .nav-link:hover {
    color: var(--primary-color);
    transform: rotate(0.5deg) translateY(-1px);
  }
  
  .nav-link:hover::after {
    width: 100%;
    opacity: 1;
  }
  
  .site-title {
    font-family: var(--handwriting-font);
    font-weight: bold;
    font-size: 1.5rem;
    color: var(--primary-color, #51733F);
    text-decoration: none;
    transition: transform 0.3s ease;
  }
  
  .site-title:hover {
    transform: translateY(-2px);
  }
  
  .dark .site-title {
    color: var(--primary-color-light, #a9c76f);
  }
  
  .theme-toggle-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: var(--primary-color, #51733F);
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.3s ease;
    border-radius: 50%; /* Make it circular */
    background-color: rgba(81, 115, 63, 0.1);
    width: 40px; /* Explicit size */
    height: 40px;
    animation: bounce 2.5s infinite ease-in-out 0.5s; /* Add bounce animation */
  }
  
  .theme-toggle-button:hover {
    transform: translateY(-2px) rotate(-10deg) scale(1.1);
    background-color: rgba(81, 115, 63, 0.2);
  }
  
  .logo-tooltip {
    position: absolute;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.7rem;
    font-style: italic;
    white-space: nowrap;
    color: var(--text-muted, #718096);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .theme-toggle-button:hover .logo-tooltip {
    opacity: 0.8;
  }
  
  .dark .theme-toggle-button {
    color: var(--primary-color-light, #a9c76f);
    background-color: rgba(169, 199, 111, 0.2);
  }
  
  .dark .theme-toggle-button:hover {
    transform: translateY(-2px) rotate(-10deg) scale(1.1);
    background-color: rgba(169, 199, 111, 0.3);
  }
  
  .theme-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    color: var(--primary-color, #51733F);
    transition: color 0.3s ease;
  }

  /* Light/dark theme toggle */
  .sun-icon, .moon-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Correctly hide icons based on theme */
  html.dark .theme-icon.sun-icon {
    display: none;
  }
  html:not(.dark) .theme-icon.moon-icon {
    display: none;
  }

  .dark .theme-icon {
    color: var(--primary-color-light, #a9c76f);
  }
  
  /* Bounce animation */
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-8px); /* Adjusted bounce height */
    }
    60% {
      transform: translateY(-4px); /* Adjusted bounce height */
    }
  }
  
  /* Mobile menu button */
  .mobile-menu-button {
    display: none;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    border: 1px dashed var(--primary-color);
    color: var(--primary-color);
    border-radius: 0.25rem;
    padding: 0.3rem;
    margin-right: 0.5rem;
    transform: rotate(-1deg);
  }
  
  .dark .mobile-menu-button {
    color: var(--primary-color-light);
    border-color: var(--primary-color-light);
  }

  /* Mobile menu - start completely hidden */
  #mobile-menu {
    position: absolute;
    width: 100%;
    top: 100%;
    left: 0;
    z-index: 100;
    padding: 0.75rem 0;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    background-color: var(--notebook-paper-color, #fff);
    border-bottom: 1px dashed rgba(81, 115, 63, 0.4);
    
    /* Notepad styling to match theme */
    background-image: 
      repeating-linear-gradient(
        transparent, 
        transparent 22px, 
        rgba(81, 115, 63, 0.1) 22px, 
        rgba(81, 115, 63, 0.1) 23px
      );
    background-size: 100% 23px;
  }
  
  /* Dark mode styling */
  .dark #mobile-menu {
    background-color: var(--notebook-paper-color-dark, #4a5568);
    border-bottom: 1px dashed rgba(255, 255, 255, 0.2);
    background-image: 
      repeating-linear-gradient(
        transparent, 
        transparent 22px, 
        rgba(255, 255, 255, 0.07) 22px, 
        rgba(255, 255, 255, 0.07) 23px
      );
  }
  
  /* Menu items styling */
  #mobile-menu a {
    display: block;
    padding: 0.625rem 1.25rem;
    border-bottom: 1px dashed rgba(81, 115, 63, 0.15);
  }
  
  .dark #mobile-menu a {
    border-bottom: 1px dashed rgba(255, 255, 255, 0.1);
  }
  
  #mobile-menu a:last-child {
    border-bottom: none;
  }

  /* Media queries for responsive design */
  @media (max-width: 768px) {
    .mobile-menu-button {
      display: flex;
    }
    
    .desktop-nav {
      display: none;
    }
    
    .site-title {
      margin-left: 1rem; /* Less margin on mobile */
    }
    
    .dark .nav-container {
      /* Slightly lighter background for better contrast on mobile dark */
      background-color: #525f74; 
    }
  }
  
  /* Align desktop nav items and hide theme toggle in mobile menu */
  .desktop-nav {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* Ensure the main content has space for the potentially fixed/sticky navbar */
  body {
    /* Add padding-top equal to the navbar height if it's fixed/sticky */
    /* Example: padding-top: 5rem; Adjust value based on actual navbar height */
  }
</style>

<nav class="nav-container w-full py-3">
  <div class="container mx-auto flex items-center justify-between px-3 md:px-6">
    <!-- Chef hat logo now toggles theme -->
    <a href="/" class="site-title">
      Chiso's Cookbook
    </a>

    <div class="flex items-center gap-4 md:gap-6">
      <!-- Main Navigation -->
      <ul class="hidden md:flex items-center gap-4 md:gap-6"> 
        <li>
          <a href="/" class="nav-link {Astro.url.pathname === '/' ? 'active' : ''}">
            <Icon name="tabler:home" class="nav-icon" />
            <span>Home</span>
          </a>
        </li>
        <li>
          <a href="/blog" class="nav-link {Astro.url.pathname.startsWith('/blog') ? 'active' : ''}">
            <Icon name="tabler:book" class="nav-icon" />
            <span>Recipe Journal</span>
          </a>
        </li>
        <li>
          <a href="/notes" class="nav-link {Astro.url.pathname.startsWith('/notes') ? 'active' : ''}">
            <Icon name="tabler:note" class="nav-icon" />
            <span>Quick Notes</span>
          </a>
        </li>
        <li>
          <a href="/projects" class="nav-link {Astro.url.pathname.startsWith('/projects') ? 'active' : ''}">
            <Icon name="tabler:books" class="nav-icon" />
            <span>Recipe Collection</span>
          </a>
        </li>
        <li>
          <a href="/tools" class="nav-link {Astro.url.pathname.startsWith('/tools') ? 'active' : ''}">
            <Icon name="tabler:tools" class="nav-icon" />
            <span>Kitchen Tools</span>
          </a>
        </li>
      </ul>
    </div>

    <!-- Theme Toggle Button -->
    <button id="theme-toggle-button" aria-label="Toggle Theme" class="theme-toggle-button">
      <Icon name="tabler:sun" class="theme-icon sun-icon h-6 w-6 text-yellow-500" />
      <Icon name="tabler:moon" class="theme-icon moon-icon h-6 w-6 text-indigo-400" />
      <span class="logo-tooltip">Toggle Theme</span>
    </button>

    <!-- Mobile Menu Button -->
    <button id="mobile-menu-button" class="md:hidden p-2 rounded-md text-primary-700 dark:text-primary-300 hover:text-white hover:bg-primary-500 dark:hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" aria-controls="mobile-menu" aria-expanded="false">
      <span class="sr-only">Open main menu</span>
      <!-- Icon when menu is closed. -->
      <Icon name="tabler:menu-2" class="block h-6 w-6 menu-icon-open" aria-hidden="true" /> 
      <!-- Icon when menu is open. -->
      <Icon name="tabler:x" class="hidden h-6 w-6 menu-icon-close" aria-hidden="true" /> 
    </button>
  </div>

  <!-- Mobile menu - conditionally shown/hidden via JavaScript -->
  <div id="mobile-menu" style="display: none;">
    <div class="px-2 pt-1 pb-3 space-y-1 mobile-nav">
      <a href="/" class="nav-link block"> 
        <Icon name="tabler:home" class="nav-icon" />
        <span>Home</span>
      </a>
      <a href="/blog" class="nav-link block">
        <Icon name="tabler:book" class="nav-icon" />
        <span>Recipe Journal</span>
      </a>
      <a href="/notes" class="nav-link block">
        <Icon name="tabler:note" class="nav-icon" />
        <span>Quick Notes</span>
      </a>
      <a href="/projects" class="nav-link block">
        <Icon name="tabler:books" class="nav-icon" />
        <span>Recipe Collection</span>
      </a>
      <a href="/tools" class="nav-link block">
        <Icon name="tabler:tools" class="nav-icon" />
        <span>Kitchen Tools</span>
      </a>
    </div>
  </div>

</nav>

<div class="h-16"></div> <!-- Spacer to account for fixed navbar -->

<script>
  // Direct DOM manipulation for mobile menu toggle with TypeScript-safe approach
  document.addEventListener('DOMContentLoaded', function() {
    // Get elements with proper HTML element casting
    const button = document.getElementById('mobile-menu-button') as HTMLElement | null;
    const menu = document.getElementById('mobile-menu') as HTMLElement | null;
    const openIcon = document.querySelector('.menu-icon-open') as HTMLElement | null;
    const closeIcon = document.querySelector('.menu-icon-close') as HTMLElement | null;
    
    // Make sure all elements exist
    if (!button || !menu || !openIcon || !closeIcon) {
      console.error('Mobile menu elements not found');
      return;
    }
    
    // Ensure menu starts hidden with inline style
    menu.style.display = 'none';
    openIcon.style.display = 'block';
    closeIcon.style.display = 'none';
    
    // Add click listener to toggle menu
    button.addEventListener('click', function(e) {
      e.preventDefault(); // Prevent any default behavior
      e.stopPropagation(); // Prevent click from bubbling to document
      
      // Check if menu is currently hidden
      const isHidden = menu.style.display === 'none';
      
      // Toggle menu visibility
      menu.style.display = isHidden ? 'block' : 'none';
      
      // Toggle icons
      openIcon.style.display = isHidden ? 'none' : 'block';
      closeIcon.style.display = isHidden ? 'block' : 'none';
      
      // Set aria attributes
      button.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
      
      console.log('Menu toggled, now', isHidden ? 'visible' : 'hidden');
    });
    
    // Close menu when clicking elsewhere on page
    document.addEventListener('click', function(e) {
      // Skip if menu is already closed or click was on menu button
      if (menu.style.display === 'none' || button.contains(e.target as Node)) {
        return;
      }
      
      // Close menu if click was outside menu
      if (!menu.contains(e.target as Node)) {
        menu.style.display = 'none';
        openIcon.style.display = 'block';
        closeIcon.style.display = 'none';
        button.setAttribute('aria-expanded', 'false');
      }
    });
  });

  // Theme handling with TypeScript types
  const themeToggleButton = document.getElementById('theme-toggle-button') as HTMLElement | null;
  const sunIcon = document.querySelector('.sun-icon') as HTMLElement | null;
  const moonIcon = document.querySelector('.moon-icon') as HTMLElement | null;
  const htmlElement = document.documentElement;

  function applyTheme(isDark: boolean): void {
    htmlElement.classList.toggle('dark', isDark);
    htmlElement.classList.toggle('light', !isDark);
    
    if (sunIcon) sunIcon.style.display = isDark ? 'none' : 'inline-flex';
    if (moonIcon) moonIcon.style.display = isDark ? 'inline-flex' : 'none';
    
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    
    // Update theme-color meta tag
    const themeColorMeta = document.querySelector('meta[name="theme-color"]') as HTMLMetaElement | null;
    if (themeColorMeta) {
      themeColorMeta.setAttribute('content', isDark ? '#4a5568' : '#51733F');
    }
  }

  // Initial theme setup
  const savedTheme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const initialDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
  
  // Apply initial theme when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    applyTheme(initialDark);
  });

  // Toggle button listener
  if (themeToggleButton) {
    themeToggleButton.addEventListener('click', () => {
      const isCurrentlyDark = htmlElement.classList.contains('dark');
      applyTheme(!isCurrentlyDark);
    });
  }

  // Listen for system theme changes if no preference is saved
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      applyTheme(e.matches);
    }
  });
</script>