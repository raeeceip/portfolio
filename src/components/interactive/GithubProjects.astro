---
// GitHub Projects component in cookbook style
// Displays repositories as "recipes" in your cookbook

interface Props {
  username: string;
  limit?: number;
  featured?: boolean;
  title?: string;
}

const { 
  username, 
  limit = 6, 
  featured = true,
  title = "Recipe Collection"
} = Astro.props;
---

<div class="github-recipes-container">
  <div class="recipes-header">
    <h2>{title}</h2>
    <div class="recipe-filters">
      <button class="filter-btn active" data-filter="all">All Recipes</button>
      <button class="filter-btn" data-filter="go">Golang</button>
      <button class="filter-btn" data-filter="typescript">TypeScript</button>
      <button class="filter-btn" data-filter="ruby">Ruby</button>
      <button class="filter-btn" data-filter="other">Other</button>
    </div>
  </div>
  
  <div class="loading-indicator">
    <div class="cookbook-loading">
      <span>Loading recipes</span>
      <div class="dots">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
      </div>
    </div>
  </div>
  
  <div class="github-recipes-grid" data-username={username} data-limit={limit} data-featured={featured.toString()}>
    <!-- Repositories will be loaded here -->
  </div>
</div>

<style>
  .github-recipes-container {
    margin: 2rem 0;
    max-width: 100%;
    overflow-x: hidden;
  }

  .recipes-header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
    border-bottom: 2px dashed var(--color-primary-200);
    padding-bottom: 1rem;
  }
  
  @media (min-width: 768px) {
    .recipes-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
  }
  
  .recipes-header h2 {
    font-family: var(--header-font-family);
    font-size: 1.75rem;
    color: var(--color-primary-600);
    margin: 0;
  }
  
  .dark .recipes-header h2 {
    color: var(--color-primary-400);
  }
  
  .recipe-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .filter-btn {
    background-color: transparent;
    border: 1px dashed var(--color-primary-200);
    padding: 0.4rem 0.8rem;
    border-radius: 20px;
    font-family: var(--handwriting-font);
    font-size: 0.9rem;
    color: var(--color-secondary-600);
    cursor: pointer;
    transition: all 0.2s;
    white-space: nowrap;
  }
  
  .filter-btn:hover, .filter-btn.active {
    background-color: var(--color-primary-100);
    color: var(--color-primary-700);
  }
  
  .dark .filter-btn {
    border-color: var(--color-primary-700);
    color: var(--color-secondary-400);
  }
  
  .dark .filter-btn:hover, .dark .filter-btn.active {
    background-color: var(--color-primary-900);
    color: var(--color-primary-300);
  }
  
  .github-recipes-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  @media (min-width: 640px) {
    .github-recipes-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    .github-recipes-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  .recipe-card {
    position: relative;
    background-color: #ffffff;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s, box-shadow 0.3s;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
    
    /* Paper texture */
    background-image: 
      repeating-linear-gradient(
        rgba(122, 158, 159, 0.02) 0px,
        rgba(122, 158, 159, 0.02) 1px,
        transparent 1px,
        transparent 25px
      );
    
    transform: rotate(-0.5deg);
    border: 1px solid var(--color-primary-100);
  }
  
  .recipe-card:hover {
    transform: translateY(-5px) rotate(-0.5deg);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .dark .recipe-card {
    background-color: var(--color-secondary-800);
    border-color: var(--color-primary-800);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    
    /* Dark mode paper texture */
    background-image: 
      repeating-linear-gradient(
        rgba(160, 212, 104, 0.03) 0px,
        rgba(160, 212, 104, 0.03) 1px,
        transparent 1px,
        transparent 25px
      );
  }
  
  .dark .recipe-card:hover {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
  }
  
  .recipe-card-header {
    margin-bottom: 1rem;
  }
  
  .recipe-title {
    font-family: var(--header-font-family);
    font-size: 1.25rem;
    line-height: 1.3;
    margin-bottom: 0.5rem;
    color: var(--color-primary-700);
    word-break: break-word;
  }
  
  .recipe-title a {
    text-decoration: none;
    color: inherit;
    display: block;
  }
  
  .dark .recipe-title {
    color: var(--color-primary-300);
  }
  
  .recipe-description {
    font-size: 0.95rem;
    color: var(--color-secondary-600);
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    font-family: var(--body-font-family);
  }
  
  .dark .recipe-description {
    color: var(--color-secondary-400);
  }
  
  .recipe-stats {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    padding-top: 0.75rem;
    border-top: 1px dashed var(--color-primary-200);
    font-size: 0.85rem;
    color: var(--color-secondary-500);
  }
  
  .dark .recipe-stats {
    border-top-color: var(--color-primary-800);
    color: var(--color-secondary-500);
  }
  
  .recipe-stat {
    display: flex;
    align-items: center;
    gap: 0.35rem;
  }
  
  .recipe-stat svg {
    width: 1rem;
    height: 1rem;
  }
  
  .recipe-languages {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: auto;
    padding-top: 1rem;
  }
  
  .language-tag {
    font-family: var(--handwriting-font);
    font-size: 0.8rem;
    padding: 0.2rem 0.6rem;
    border-radius: 20px;
    background-color: rgba(81, 115, 63, 0.1);
    color: var(--color-primary-700);
    white-space: nowrap;
  }
  
  .dark .language-tag {
    background-color: rgba(160, 212, 104, 0.1);
    color: var(--color-primary-300);
  }
  
  /* Language-specific styling */
  .language-tag[data-lang="go"] {
    background-color: rgba(0, 173, 216, 0.1);
    color: #00add8;
  }
  
  .language-tag[data-lang="typescript"] {
    background-color: rgba(0, 122, 204, 0.1);
    color: #007acc;
  }
  
  .language-tag[data-lang="ruby"] {
    background-color: rgba(170, 0, 0, 0.1);
    color: #CC342D;
  }
  
  .dark .language-tag[data-lang="go"] {
    background-color: rgba(0, 173, 216, 0.2);
    color: #29b6f6;
  }
  
  .dark .language-tag[data-lang="typescript"] {
    background-color: rgba(0, 122, 204, 0.2);
    color: #42a5f5;
  }
  
  .dark .language-tag[data-lang="ruby"] {
    background-color: rgba(170, 0, 0, 0.2);
    color: #ef5350;
  }
  
  /* Loading indicator */
  .loading-indicator {
    display: flex;
    justify-content: center;
    padding: 2rem 0;
  }
  
  .cookbook-loading {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-family: var(--handwriting-font);
    color: var(--color-secondary-600);
  }
  
  .dark .cookbook-loading {
    color: var(--color-secondary-400);
  }
  
  .dots {
    display: flex;
    gap: 0.25rem;
  }
  
  .dot {
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background-color: var(--color-primary-500);
    animation: dot-bounce 1.4s infinite ease-in-out;
  }
  
  .dot:nth-child(1) {
    animation-delay: 0s;
  }
  
  .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes dot-bounce {
    0%, 80%, 100% {
      transform: scale(0.6);
      opacity: 0.6;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  /* Error state */
  .error-message {
    background-color: rgba(239, 68, 68, 0.1);
    border-left: 3px solid #ef4444;
    padding: 1rem;
    border-radius: 0.25rem;
    color: #b91c1c;
    font-family: var(--body-font-family);
  }
  
  .dark .error-message {
    background-color: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }
</style>

<script>
  // Initialize GitHub projects on page load
  document.addEventListener('DOMContentLoaded', () => {
    const projectsGrid = document.querySelector('.github-recipes-grid');
    if (!projectsGrid) return;
    
    const username = projectsGrid.getAttribute('data-username');
    const limit = parseInt(projectsGrid.getAttribute('data-limit') || '6');
    const featured = projectsGrid.getAttribute('data-featured') === 'true';
    
    if (username) {
      loadGithubProjects(username, limit, featured);
    }
    
    // Add event listeners to filter buttons
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        // Remove active class from all buttons
        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
        
        // Add active class to clicked button
        btn.classList.add('active');
        
        // Filter repositories
        filterRepositories(btn.getAttribute('data-filter'));
      });
    });
  });
  
  async function loadGithubProjects(username, limit, featured) {
    const projectsGrid = document.querySelector('.github-recipes-grid');
    const loadingIndicator = document.querySelector('.loading-indicator');
    
    try {
      // Get repos from our API proxy
      const response = await fetch(`/api/github?endpoint=users/${username}/repos?sort=updated&per_page=100`);
      let repos = await response.json();
      
      // Hide loading indicator
      if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
      }
      
      // Sort and filter repositories
      if (repos && repos.length > 0) {
        // Sort by stars and then by updated date
        repos.sort((a, b) => {
          // First by stars
          if (b.stargazers_count !== a.stargazers_count) {
            return b.stargazers_count - a.stargazers_count;
          }
          // Then by updated date
          return new Date(b.updated_at) - new Date(a.updated_at);
        });
        
        // Filter repositories based on featured flag
        if (featured) {
          repos = repos.filter(repo => 
            !repo.fork && 
            !repo.archived && 
            !repo.name.includes('template') && 
            !repo.name.includes('demo') &&
            !repo.description?.includes('archived')
          );
        }
        
        // Prioritize Golang, TypeScript and Ruby repositories
        repos = repos.sort((a, b) => {
          const aLang = a.language?.toLowerCase() || '';
          const bLang = b.language?.toLowerCase() || '';
          
          const isPriorityA = aLang === 'go' || aLang === 'typescript' || aLang === 'ruby';
          const isPriorityB = bLang === 'go' || bLang === 'typescript' || bLang === 'ruby';
          
          if (isPriorityA && !isPriorityB) return -1;
          if (!isPriorityA && isPriorityB) return 1;
          return 0;
        });
        
        // Limit the number of repositories
        repos = repos.slice(0, limit);
        
        // Create repository cards
        if (projectsGrid) {
          projectsGrid.innerHTML = repos.map(repo => {
            // Format date
            const updatedDate = new Date(repo.updated_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });
            
            const language = repo.language || 'Other';
            const languageClass = language.toLowerCase().replace(/[^a-z0-9]/g, '');
            
            return `
              <div class="recipe-card" data-repo="${repo.name}" data-lang="${languageClass}">
                <div class="recipe-card-header">
                  <h3 class="recipe-title">
                    <a href="${repo.html_url}" target="_blank" rel="noopener noreferrer">
                      ${repo.name}
                    </a>
                  </h3>
                </div>
                
                <p class="recipe-description">
                  ${repo.description || 'No description available.'}
                </p>
                
                <div class="recipe-stats">
                  <div class="recipe-stat">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M12 2L15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2z" />
                    </svg>
                    ${repo.stargazers_count}
                  </div>
                  
                  <div class="recipe-stat">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3" />
                    </svg>
                    ${repo.forks_count}
                  </div>
                  
                  <div class="recipe-stat">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                      <line x1="16" y1="2" x2="16" y2="6" />
                      <line x1="8" y1="2" x2="8" y2="6" />
                      <line x1="3" y1="10" x2="21" y2="10" />
                    </svg>
                    ${updatedDate}
                  </div>
                </div>
                
                <div class="recipe-languages">
                  <span class="language-tag" data-lang="${languageClass}">${language}</span>
                  <div class="languages-loader" data-repo="${repo.full_name}"></div>
                </div>
              </div>
            `;
          }).join('');
          
          // Load additional languages for each repository
          repos.forEach(repo => {
            loadRepoLanguages(username, repo.name);
          });
        }
      } else {
        // Display error message
        if (projectsGrid) {
          projectsGrid.innerHTML = `
            <div class="error-message">
              <p>No recipes found. The chef might be taking a break or updating their cookbook.</p>
              <p>Check back later or visit <a href="https://github.com/${username}" target="_blank" rel="noopener noreferrer">GitHub</a> directly.</p>
            </div>
          `;
        }
      }
    } catch (error) {
      console.error('Error loading GitHub projects:', error);
      
      if (projectsGrid) {
        projectsGrid.innerHTML = `
          <div class="error-message">
            <p>Error loading recipes from GitHub's kitchen.</p>
            <p>Please try again later or visit <a href="https://github.com/${username}" target="_blank" rel="noopener noreferrer">GitHub</a> directly.</p>
          </div>
        `;
      }
      
      if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
      }
    }
  }
  
  // Load additional languages for a repository
  async function loadRepoLanguages(username, repoName) {
    try {
      const response = await fetch(`/api/github?endpoint=repos/${username}/${repoName}/languages`);
      const languages = await response.json();
      
      // Get loader element
      const loaderElement = document.querySelector(`.languages-loader[data-repo="${username}/${repoName}"]`);
      
      if (loaderElement && languages) {
        // Sort languages by usage
        const sortedLanguages = Object.keys(languages)
          .sort((a, b) => languages[b] - languages[a])
          .filter(lang => lang.toLowerCase() !== repoName.split('/')[1].toLowerCase()) // Exclude main language
          .slice(0, 2); // Limit to 2 additional languages
        
        // Create language tags HTML
        const languageTags = sortedLanguages.map(lang => {
          const langClass = lang.toLowerCase().replace(/[^a-z0-9]/g, '');
          return `<span class="language-tag" data-lang="${langClass}">${lang}</span>`;
        }).join('');
        
        // Update loader element
        loaderElement.innerHTML = languageTags;
      }
    } catch (error) {
      console.error(`Error loading languages for ${username}/${repoName}:`, error);
    }
  }
  
  // Filter repositories by language
  function filterRepositories(filter) {
    const allRepos = document.querySelectorAll('.recipe-card');
    
    allRepos.forEach(repo => {
      const repoLang = repo.getAttribute('data-lang');
      
      if (filter === 'all' || (filter === 'other' && !['go', 'typescript', 'ruby'].includes(repoLang)) || filter === repoLang) {
        repo.style.display = 'flex';
      } else {
        repo.style.display = 'none';
      }
    });
  }
</script>
