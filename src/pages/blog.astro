---
import SiteHeader from "@components/layout/SiteHeader.astro";
import { Icon } from "astro-icon/components";
import ArticleListItem from "../components/items/ArticleListItem.astro";
import Layout from "../layouts/Layout.astro";

import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

// Initial posts to show
const INITIAL_POSTS = 5;

const posts = await getCollection("blog", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});

// Sort posts by date (newest first)
let publishedPosts = posts?.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Get initial posts to show
const initialPosts = publishedPosts.slice(0, INITIAL_POSTS);
const totalPosts = publishedPosts.length;
const hasMorePosts = totalPosts > INITIAL_POSTS;

// Group all posts by year for the sidebar
let postsByYear: Record<string, Array<CollectionEntry<"blog">>> = {};
for (const post of publishedPosts) {
  const year = post.data.date.getFullYear().toString();
  if (!postsByYear[year]) {
    postsByYear[year] = [];
  }
  postsByYear[year].push(post);
}
const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a));

// Function to create pagination URL
function getPaginationUrl(pageNum: number) {
  // Use absolute URLs instead of relative URLs to ensure proper navigation
  const baseUrl = new URL('/blog', Astro.url.origin).toString();
  // Return the URL with proper query string format
  return pageNum === 1 ? baseUrl : `${baseUrl}?page=${pageNum}`;
}

---

<style>
  .recipe-tab {
    position: absolute;
    top: -2rem;
    left: 2.5rem;
    background-color: theme("colors.primary.600");
    color: white;
    padding: 0.5rem 1.5rem;
    font-family: var(--cursive-font);
    font-weight: 600;
    border-radius: 0.5rem 0.5rem 0 0;
    z-index: -1;
    box-shadow: 
      inset 0 -5px 10px rgba(0, 0, 0, 0.1),
      2px -2px 5px rgba(0, 0, 0, 0.05);
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    
    @media (max-width: 768px) {
      left: 1.5rem;
      padding: 0.4rem 1rem;
      font-size: 0.9rem;
    }
  }
  
  .dark .recipe-tab {
    background-color: theme("colors.primary.700");
    box-shadow: 
      inset 0 -5px 10px rgba(0, 0, 0, 0.2),
      2px -2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .tab-icon {
    width: 1.2rem;
    height: 1.2rem;
  }
  
  .sidebar-nav {
    position: sticky;
    top: 24px;
    background-color: rgba(255, 255, 255, 0.7);
    border: 1px solid theme("colors.secondary.300");
    border-radius: 0.5rem;
    padding: 1.25rem;
    box-shadow: 2px 2px 6px rgba(81, 115, 63, 0.1);
    background-image: 
      repeating-linear-gradient(
        transparent,
        transparent 27px,
        rgba(81, 115, 63, 0.05) 27px,
        rgba(81, 115, 63, 0.05) 28px
      );
    background-size: 100% 28px;
    background-position: 0 -4px;
    transform: rotate(0.8deg);
    transition: transform 0.3s ease;
  }
  
  .dark .sidebar-nav {
    background-color: #3A4D30;
    border-color: rgba(255, 255, 255, 0.2);
    background-image: 
      repeating-linear-gradient(
        transparent,
        transparent 27px,
        rgba(255, 255, 255, 0.05) 27px,
        rgba(255, 255, 255, 0.05) 28px
      );
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.2);
  }
  
  .dark .sidebar-nav .sidebar-heading {
    color: white;
    border-bottom: 1px dashed rgba(255, 255, 255, 0.3);
  }
  
  .dark .sidebar-nav a {
    color: rgba(255, 255, 255, 0.9);
  }
  
  .dark .sidebar-nav a:hover {
    color: white;
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .sidebar-nav:hover {
    transform: rotate(0deg);
  }
  
  .sidebar-heading {
    font-family: var(--handwriting-font);
    font-size: 1.2rem;
    color: theme("colors.primary.700");
    margin-bottom: 0.75rem;
    position: relative;
    display: inline-block;
    
    @apply dark:text-primary-400;
    
    &::after {
      content: '';
      position: absolute;
      bottom: -3px;
      left: 0;
      width: 100%;
      height: 2px;
      background-color: theme("colors.primary.400");
      opacity: 0.3;
      border-radius: 1px;
    }
  }
  
  .year-nav {
    border-left: 2px solid theme("colors.primary.200");
    padding-left: 1rem;
    max-height: 200px;
    overflow-y: auto;
    scrollbar-width: thin;
    
    @apply dark:border-primary-800;
    
    /* Style scrollbar for webkit browsers */
    &::-webkit-scrollbar {
      width: 4px;
    }
    
    &::-webkit-scrollbar-track {
      background: rgba(81, 115, 63, 0.05);
      border-radius: 4px;
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(81, 115, 63, 0.2);
      border-radius: 4px;
    }
    
    .dark &::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.05);
    }
    
    &::-webkit-scrollbar-thumb {
      background-color: rgba(255, 255, 255, 0.1);
    }
  }
  
  .year-link {
    font-family: var(--handwriting-font);
    display: block;
    color: theme("colors.primary.600");
    margin-bottom: 0.5rem;
    position: relative;
    transition: all 0.2s ease;
    transform-origin: left;
    
    @apply dark:text-primary-400;
    
    &:hover {
      color: theme("colors.primary.800");
      transform: scale(1.05);
      
      @apply dark:text-primary-300;
    }
    
    &::before {
      content: 'â€¢';
      position: absolute;
      left: -1.25rem;
      color: theme("colors.primary.500");
      
      @apply dark:text-primary-600;
    }
  }
  
  .subscribe-box {
    margin-top: 1.5rem;
    background-color: rgba(255, 255, 200, 0.2);
    border: 1px dashed theme("colors.primary.400");
    border-radius: 0.5rem;
    padding: 1rem;
    transform: rotate(-0.5deg);
    
    @apply dark:bg-primary-900/10 dark:border-primary-700;
  }
  
  .feed-link {
    display: flex;
    align-items: center;
    font-family: var(--handwriting-font);
    color: theme("colors.primary.600");
    gap: 0.25rem;
    margin-bottom: 0.5rem;
    transition: all 0.2s ease;
    
    @apply dark:text-primary-400;
    
    &:hover {
      color: theme("colors.primary.800");
      transform: translateX(5px);
      
      @apply dark:text-primary-300;
    }
  }
  
  .title-section {
    position: relative;
    margin-bottom: 2rem;
  }
  
  .recipe-title {
    font-family: var(--header-font-family);
    font-weight: 700;
    font-size: 2rem;
    color: theme("colors.primary.700");
    position: relative;
    z-index: 2;
    
    @apply dark:text-primary-300;
  }
  
  /* Recipe stain decorations */
  .recipe-stain {
    position: absolute;
    background: radial-gradient(
      ellipse at center,
      rgba(165, 42, 42, 0.04) 0%,
      rgba(165, 42, 42, 0.06) 50%,
      rgba(165, 42, 42, 0) 70%
    );
    border-radius: 50%;
    z-index: 0;
    pointer-events: none;
  }
  
  .dark .recipe-stain {
    background: radial-gradient(
      ellipse at center,
      rgba(217, 119, 6, 0.1) 0%,
      rgba(193, 105, 6, 0.08) 50%,
      transparent 70%
    );
  }
  
  .stain-1 {
    bottom: 3rem;
    right: 3rem;
    width: 100px;
    height: 100px;
    transform: rotate(12deg) scale(1.2, 1);
  }
  
  .stain-2 {
    top: 25%;
    left: 2rem;
    width: 60px;
    height: 60px;
    transform: rotate(-6deg) scale(0.8, 1);
  }
  
  /* Sticky note for the sidebar navigation */
  .sticky-note {
    position: relative;
    background-color: #F9F4BE;
    border-radius: 0.25rem;
    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin-bottom: 1.5rem;
    transform: rotate(-1deg);
  }
  
  .dark .sticky-note {
    background-color: #6A632D;
    box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.3);
    color: white;
  }
  
  .sticky-note-title {
    font-weight: bold;
    color: #3A4D30;
    border-bottom: 1px dashed rgba(0, 0, 0, 0.3);
    margin-bottom: 0.5rem;
    padding-bottom: 0.25rem;
  }
  
  .dark .sticky-note-title {
    color: white;
    border-bottom-color: rgba(255, 255, 255, 0.3);
  }
  
  /* Mobile adjustments */
  @media (max-width: 768px) {
    .sidebar-nav {
      position: relative;
      top: 0;
      transform: rotate(0);
      margin-bottom: 1.5rem;
    }
    
    .stain-1, .stain-2 {
      display: none;
    }
  }
  
  .dark .posts-container {
    background-color: #3A4D30;
    border-color: rgba(255, 255, 255, 0.2);
    box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
  }
  
  .dark .post-list {
    color: white;
  }
  
  .dark .post-link {
    color: white;
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-decoration-color: rgba(255, 255, 255, 0.3);
  }
  
  .dark .recipe-title {
    color: white;
  }
  
  .dark .recipe-meta {
    color: rgba(255, 255, 255, 0.9);
  }
  
  /* Load More button styling */
  .load-more-button {
    display: block;
    margin: 2rem auto;
    background-color: var(--notebook-paper-color);
    border: 2px dashed theme("colors.primary.500");
    padding: 0.75rem 2rem;
    border-radius: 0.5rem;
    font-family: var(--handwriting-font);
    font-size: 1.2rem;
    color: theme("colors.primary.700");
    position: relative;
    transition: all 0.2s ease;
    box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.1);
    transform: rotate(-1deg);
    
    &:hover {
      transform: translateY(-3px) rotate(0deg);
      box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.15);
      background-color: theme("colors.primary.50");
    }
    
    &:active {
      transform: translateY(1px) rotate(-2deg);
      box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    /* Paperclip decoration */
    &::before {
      content: '';
      position: absolute;
      top: -10px;
      right: 20px;
      width: 20px;
      height: 35px;
      border: 2px solid theme("colors.primary.400");
      border-radius: 10px 10px 0 0;
      border-bottom: none;
      transform: rotate(25deg);
      opacity: 0.7;
    }
    
    @apply dark:bg-secondary-800 dark:text-primary-300 dark:border-primary-600 dark:hover:bg-secondary-700;
  }
  
  .load-more-button.loading {
    opacity: 0.7;
    cursor: wait;
  }
  
  .load-more-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    border-style: dotted;
    
    &:hover {
      transform: rotate(-1deg);
      box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.1);
      background-color: var(--notebook-paper-color);
      
      @apply dark:bg-secondary-800;
    }
  }
  
  /* Make the notebook page fill width on desktop while maintaining the notebook aesthetic */
  .container-full {
    width: 100%;
    max-width: 100%;
    margin: 0 auto;
  }
  
  .full-width {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
    border-radius: 0;
  }
  
  /* Enhanced notebook styling for desktop */
  @media (min-width: 1024px) {
    .notebook-page {
      min-height: calc(100vh - 100px);
    }
  }
</style>

<Layout title="Recipe Journal">
  <main class="handwritten container-full px-2 md:px-4 max-w-none">
    <SiteHeader />
    
    <div class="notebook-page full-width pt-8 pb-12 px-3 md:px-8">
      <div class="flex flex-col lg:flex-row lg:justify-between gap-8">
        <!-- Sidebar for recipe index/categories - cookbook-style sidebar -->
        <aside class="recipe-index lg:w-1/4 xl:w-1/5 lg:sticky lg:top-4 lg:self-start px-2 py-4 bg-opacity-70 rounded-lg">
          <div class="recipe-tab flex items-center">
            <Icon name="tabler:book" class="w-5 h-5 mr-2" />
            <span>Index</span>
          </div>
          
          <h3 class="text-xl font-medium mb-4 text-primary-700 dark:text-primary-300 handwritten-title border-b border-primary-200 dark:border-primary-800 pb-2">
            Recipe Journal
          </h3>
          
          <!-- Years as recipe chapters -->
          <div class="recipe-chapters space-y-4">
            {years.map(year => (
              <div class="recipe-chapter">
                <h4 class="text-lg font-medium mb-2 flex items-center">
                  <span class="recipe-year handwritten-title">{year}</span>
                  <span class="recipe-count text-sm ml-2">({postsByYear[year].length})</span>
                </h4>
                <ul class="space-y-1 pl-3">
                  {postsByYear[year].map(post => (
                    <li>
                      <a 
                        href={`/posts/${post.slug}`} 
                        class="recipe-link flex items-start hover:text-primary-700 dark:hover:text-primary-300 transition-colors"
                      >
                        <span class="recipe-bullet">â€¢</span>
                        <span class="recipe-name truncate">{post.data.title}</span>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </aside>
        
        <!-- Main content - cookbook-style recipe list -->
        <div class="recipe-content lg:w-3/4 xl:w-4/5">
          <h2 class="recipe-title mb-8 handwritten-title">Recipe Collection</h2>
          
          <p class="recipe-intro text-lg mb-6">
            Welcome to my cookbook journal! Here you'll find a collection of articles, thoughts, and guides 
            I've written over time. Each "recipe" represents a different learning experience or insight.
          </p>
          
          <div class="posts-container space-y-8">
            {initialPosts.map(post => (
              <ArticleListItem post={post} />
            ))}
          </div>
          
          {hasMorePosts && (
            <div class="load-more-container mt-8 text-center">
              <button 
                id="load-more-button"
                class="load-more-button handwritten-button"
              >
                <span>Load More Recipes</span>
                <Icon name="tabler:book-download" class="inline-block ml-2 h-5 w-5" />
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ restOfPosts: JSON.stringify(publishedPosts.slice(INITIAL_POSTS)) }}>
  // Client-side JavaScript for the "Load More" functionality
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreButton = document.getElementById('load-more-button');
    if (!loadMoreButton) return;
    
    const postsContainer = document.querySelector('.posts-container');
    if (!postsContainer) return;
    
    // Parse the rest of the posts from the JSON string
    const remainingPosts = JSON.parse(restOfPosts);
    let currentIndex = 0;
    const postsPerLoad = 5; // Number of posts to load with each click
    
    // Hide the button if there are no more posts to load
    if (remainingPosts.length === 0) {
      loadMoreButton.classList.add('disabled');
      loadMoreButton.textContent = 'No More Recipes';
      loadMoreButton.disabled = true;
    }
    
    loadMoreButton.addEventListener('click', async () => {
      // Disable the button and show loading state
      loadMoreButton.classList.add('loading');
      loadMoreButton.disabled = true;
      loadMoreButton.innerHTML = '<span>Loading...</span> <svg class="animate-spin ml-2 h-5 w-5 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
      
      // Simulate a small delay for the loading indicator
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Get the next batch of posts
      const postsToLoad = remainingPosts.slice(currentIndex, currentIndex + postsPerLoad);
      currentIndex += postsPerLoad;
      
      // Add the new posts to the container
      postsToLoad.forEach((post, index) => {
        const rotation = (index % 4 === 1) ? 'transform rotate-0.5deg' : (index % 4 === 3) ? 'transform -rotate-0.5deg' : '';
        const postElement = document.createElement('li');
        postElement.className = rotation;
        
        // Use the same markup as in the template for consistency
        // Note: This will be simpler than the actual ArticleListItem component
        postElement.innerHTML = `
          <div class="recipe-card">
            <div class="corner-fold"></div>
            <a href="/posts/${post.slug}" class="post-title">
              <span class="title-text">${post.data.title}</span>
              <span class="title-icon inline-flex items-center ml-2 text-primary-500 dark:text-primary-200 transform -translate-y-1 flex-shrink-0">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M12 3c1.918 0 3.52 1.35 3.91 3.151a4 4 0 0 1 2.09 7.723l0 .126a4 4 0 0 1 -2 7a4 4 0 0 1 -4 2a4 4 0 0 1 -4 -2a4 4 0 0 1 -2 -7l0 -.126a4 4 0 0 1 2.09 -7.723a4 4 0 0 1 3.91 -3.151z"></path>
                  <path d="M12 3v10"></path>
                </svg>
              </span>
            </a>
            <p class="post-description">${post.data.description || ''}</p>
            <div class="flex items-center justify-between mt-2 flex-wrap gap-2">
              <div class="max-w-[75%]">
                ${post.data.tags ? `<div class="tags-container">${post.data.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}</div>` : ''}
              </div>
              <time datetime="${new Date(post.data.date).toISOString()}" class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1 text-primary-500 dark:text-primary-200" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                  <path d="M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z"></path>
                  <path d="M16 3v4"></path>
                  <path d="M8 3v4"></path>
                  <path d="M4 11h16"></path>
                  <path d="M11 15h1"></path>
                  <path d="M12 15v3"></path>
                </svg>
                ${new Date(post.data.date).toLocaleDateString("en-US", {year: 'numeric', month: 'short', day: 'numeric'})}
              </time>
            </div>
          </div>
        `;
        
        postsContainer.appendChild(postElement);
      });
      
      // Update the counter text
      const counterText = document.querySelector('.text-sm.font-handwriting');
      if (counterText) {
        const totalShown = document.querySelectorAll('.posts-container li').length;
        const totalPosts = totalShown + remainingPosts.length - currentIndex;
        counterText.textContent = `Showing ${totalShown} of ${totalPosts} recipes`;
      }
      
      // Reset the button state
      loadMoreButton.classList.remove('loading');
      loadMoreButton.disabled = false;
      
      // If there are no more posts to load, disable the button
      if (currentIndex >= remainingPosts.length) {
        loadMoreButton.classList.add('disabled');
        loadMoreButton.innerHTML = '<span>All Recipes Loaded</span> <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 h-5 w-5 inline-block" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l5 5l10 -10"></path></svg>';
        loadMoreButton.disabled = true;
      } else {
        loadMoreButton.innerHTML = '<span>Load More Recipes</span> <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 h-5 w-5 inline-block" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path><path d="M3 6l0 13"></path><path d="M12 6l0 13"></path><path d="M21 6l0 13"></path></svg>';
      }
    });
  });
</script>