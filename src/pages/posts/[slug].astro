---
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { getMetaUrl } from "../../lib/utils";
import Tags from "../../components/misc/Tags.astro";
import PageNotes from "../../components/interactive/PageNotes.astro";
import CollapsibleBlogContent from "../../components/blog/CollapsibleBlogContent.astro";

import Code from "../../components/mdx/Code.astro";
import H1 from "../../components/mdx/H1.astro";
import H2 from "../../components/mdx/H2.astro";
import H3 from "../../components/mdx/H3.astro";

// Format date helper function
function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

if (!post) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found",
  });
}

let {
  data: { title, description: desc, tags = [], keywords = "", date, image },
  slug,
} = post;

// Get the rendered content and headings
const { Content, headings } = await post.render();

// Format headings for table of contents
const tableOfContents = headings && headings.map ? headings.map((heading) => {
  return {
    depth: heading.depth,
    slug: heading.slug,
    text: heading.text
  };
}) : [];

const metaUrl = image ? image : getMetaUrl(title, date);
const minuteReadTime = Math.ceil(post.body.length / 1500);

// Convert tags for meta keywords if needed
const keywordsString = keywords ? 
  (typeof keywords === 'string' ? keywords : (Array.isArray(keywords) ? keywords : []).join(', ')) : 
  (tags && Array.isArray(tags) ? tags.join(', ') : '');

// Type-safe handling of dates
const publishDate = date instanceof Date ? date : new Date(date);

---

<Layout 
  title={title}
  description={desc}
  keywords={keywordsString}
  ogImage={metaUrl}
  articleDate={publishDate}
  articleModifiedDate={publishDate}
  type="article"
  twitterCard="summary_large_image"
>
  <!-- Use the same container approach as notes page -->
  <main class="container mx-auto px-2 md:px-4">
    <article class="notebook-page mt-6 relative">
      <!-- Post Header -->
      <header class="post-header">
        <h1 class="post-title">{title}</h1>
        <div class="post-meta">
          <time class="post-date" datetime={publishDate.toString()}>
            <!-- Calendar icon SVG -->
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            {formatDate(publishDate)}
          </time>
          {minuteReadTime > 0 && (
            <span class="post-read-time">
              <!-- Clock icon SVG -->
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              {minuteReadTime} min read
            </span>
          )}
        </div>
        <Tags tags={tags} />
        <div class="recipe-tab">Blog Post</div>
      </header>

      <!-- Notes Button -->
      <button id="notes-btn" class="notes-btn">
        <!-- Notes icon SVG -->
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
          <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
          <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
        </svg>
        Recipe Notes
      </button>

      <!-- Page Notes Component (initially hidden) -->
      <div id="page-notes" class="hidden recipe-notes-container">
        <h4 class="recipe-note-title">Recipe Notes</h4>
        <p class="text-sm italic mb-2">Add your thoughts to this recipe!</p>
        <div id="notes-content" class="notes-content">
          <!-- Notes will be dynamically inserted here -->
          <div class="empty-notes-message text-sm">
            <p>No notes yet. Add your first note!</p>
          </div>
        </div>
        <textarea id="new-note" class="note-input" placeholder="Add a note..."></textarea>
        <button id="add-note-button" class="note-button">Add Note</button>
        <PageNotes postSlug={post.slug} />
      </div>

      <!-- Post grid with TOC and content - direct children of article -->
      <div class="post-grid-container">
        <!-- Sidebar -->
        <aside class="hidden lg:block sidebar-container">
          <div class="recipe-note">
            <h4 class="recipe-note-title">Contents</h4>
            {tableOfContents && tableOfContents.map && tableOfContents.map((item, i) => (
              <div class="toc-item" style={`margin-left: ${(item.depth - 1) * 1}rem;`}>
                <a href={`#${item.slug}`} class="text-lg font-medium text-primary-600 dark:text-primary-300">{item.text}</a>
              </div>
            ))}
          </div>
          
          <!-- Recipe Card -->
          <div class="recipe-card">
            <h4 class="recipe-note-title">Recipe Card</h4>
            <div class="recipe-meta">
              <div class="recipe-author">By: Chisom</div>
              <div class="recipe-difficulty">Complexity: Medium</div>
              <div class="recipe-time">Reading time: {minuteReadTime} min</div>
            </div>
          </div>
        </aside>
        
        <!-- Direct content - no extra wrappers -->
        <div class="post-content">
          <!-- Mobile TOC -->
          <div class="block lg:hidden mb-8">
            <div class="recipe-note">
              <h4 class="recipe-note-title">Contents</h4>
              <div class="collapsible-toc collapsed" id="collapsible-toc">
                {tableOfContents && tableOfContents.map && tableOfContents.map((item, i) => (
                  <div class="toc-item" style={`margin-left: ${(item.depth - 1) * 1}rem;`}>
                    <a href={`#${item.slug}`} class="text-lg font-medium text-primary-600 dark:text-primary-300">{item.text}</a>
                  </div>
                ))}
              </div>
              <button type="button" id="toggle-toc-btn" class="toggle-content-btn">
                Show Contents
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                </svg>
              </button>
            </div>
          </div>
        
          <!-- Content with no extra wrappers -->
          <CollapsibleBlogContent>
            <Content components={{
              pre: Code,
              h1: H1,
              h2: H2,
              h3: H3
            }} />
          </CollapsibleBlogContent>
        </div>
      </div>
    </article>
  </main>
</Layout>

<style>
  /* Notebook page styling for the entire post */
  .notebook-page {
    position: relative;
    padding: 2rem 1rem 3rem;
    border-radius: 0.5rem;
    background-color: var(--notebook-paper-color, #f5f5eb);
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.1);
    width: 100%;
  }
  
  @media (min-width: 768px) {
    .notebook-page {
      padding: 3rem 2rem;
    }
  }
  
  .dark .notebook-page {
    background-color: var(--notebook-paper-color-dark, #4a5568);
    border-color: rgba(0, 0, 0, 0.2);
  }
  
  /* Recipe tab styling */
  .recipe-tab {
    position: absolute;
    top: -2rem;
    right: 3rem;
    padding: 0.5rem 1.5rem;
    background-color: var(--primary-color, #51733F);
    color: white;
    border-radius: 0.5rem 0.5rem 0 0;
    font-family: var(--handwriting-font);
    font-weight: 600;
    transform: rotate(2deg);
    box-shadow: 2px -2px 5px rgba(0, 0, 0, 0.1);
    z-index: 5;
  }
  
  .dark .recipe-tab {
    background-color: var(--accent-color, #a9c76f);
    color: #2d3748;
  }
  
  /* Post Header Styling with notebook aesthetics */
  .post-header {
    display: flex;
    flex-direction: column;
    margin-bottom: 2rem;
    position: relative;
    border-bottom: 2px dashed var(--primary-color, #51733F);
    padding-bottom: 1rem;
    width: 100%;
  }
  
  .post-title {
    font-family: var(--font-serif);
    font-size: 2.5rem;
    line-height: 1.2;
    margin-bottom: 0.5rem;
    color: var(--primary-color, #51733F);
  }
  
  .dark .post-title {
    color: var(--accent-color);
  }
  
  .post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-family: var(--handwriting-font);
  }
  
  .post-date {
    background-color: #51733F;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    font-weight: bold;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
  }
  
  .dark .post-date {
    background-color: #66845A;
  }
  
  .post-tag {
    background-color: rgba(81, 115, 63, 0.15);
    color: var(--primary-color, #51733F); 
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .dark .post-tag {
    background-color: rgba(102, 132, 90, 0.3);
    color: #a9c76f;
  }
  
  .post-read-time {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.9rem;
    color: #555;
  }
  
  .dark .post-read-time {
    color: #e2e8f0;
  }
  
  /* Mobile optimizations for header */
  @media (max-width: 767px) {
    .post-header {
      margin-bottom: 1.5rem;
      padding: 0 1rem 1rem 1rem;
    }
    
    .post-title {
      font-size: 1.8rem;
    }
    
    .post-meta {
      flex-direction: column;
      gap: 0.25rem;
    }
  }

  /* Post content container */
  .post-content {
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }
  
  /* Force content to use full available width */
  .post-content :global(*),
  .collapsible-content :global(*) {
    max-width: 100%;
    box-sizing: border-box;
  }
  
  /* Ensure code blocks are fully visible */
  .post-content :global(pre),
  .post-content :global(code) {
    width: 100%;
    max-width: 100%;
    overflow-x: auto;
  }
  
  /* Left margin line like a notebook */
  .post::after {
    content: "";
    position: absolute;
    top: 0;
    left: calc(50% - 420px);
    bottom: 0;
    width: 1px;
    background-color: rgba(255, 0, 0, 0.2);
    pointer-events: none;
    z-index: 1;
  }
  
  .dark .post::after {
    background-color: rgba(255, 100, 100, 0.15);
  }
  
  @media (max-width: 900px) {
    .post::after {
      left: 3rem;
    }
  }
  
  @media (max-width: 767px) {
    .post {
      padding: 1rem 0;
    }
    
    .post::after {
      left: 1.5rem;
    }
  }

  /* Post grid layout - simplified */
  .post-grid-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
    width: 100%;
  }
  
  /* Desktop layout with wider content area */
  @media (min-width: 768px) {
    .post-grid-container {
      grid-template-columns: 250px 1fr;
      gap: 2.5rem;
    }
    
    /* Override container width constraints on desktop */
    .container {
      max-width: 1440px;
      width: 95%;
    }
    
    /* Ensure content takes full width on desktop */
    .post-content {
      width: 100%;
      flex-grow: 1;
      min-width: 0; /* Prevent min-width:auto from causing overflow */
    }
    
    /* Force all content to be wide on desktop */
    .post-content :global(p),
    .post-content :global(h1),
    .post-content :global(h2),
    .post-content :global(h3),
    .post-content :global(h4),
    .post-content :global(h5),
    .post-content :global(h6),
    .post-content :global(blockquote),
    .post-content :global(ul),
    .post-content :global(ol),
    .post-content :global(pre),
    .post-content :global(figure),
    .post-content :global(table) {
      width: 100%; 
      max-width: 100%;
    }
  }
  
  /* Container for the main blog content */
  .blog-content-container {
    width: 100%;
  }

  /* Notes button styling to match read more button */
  .notes-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin: 1.5rem 0;
    padding: 0.5rem 1.5rem;
    background-color: #f5f5f0;
    border: 1px dashed #51733F;
    border-radius: 0.25rem;
    color: #51733F;
    font-family: var(--handwriting-font);
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
  }
  
  .notes-btn:hover {
    background-color: #51733F;
    color: white;
    transform: translateY(-1px);
    box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.1);
  }
  
  .dark .notes-btn {
    background-color: #2d3748;
    border-color: #66845A;
    color: #a9c76f;
  }
  
  .dark .notes-btn:hover {
    background-color: #66845A;
    color: white;
  }

  /* Toggle button for TOC - match Read More button */
  #toggle-toc-btn {
    display: flex;
    margin: 1rem auto;
    padding: 0.5rem 1.5rem;
    background-color: #f5f5f0;
    border: 1px dashed #51733F;
    border-radius: 0.25rem;
    color: #51733F;
    font-family: var(--handwriting-font);
    font-size: 1.1rem;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
    width: auto;
    min-width: 120px;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
    position: relative;
    z-index: 5;
  }
  
  #toggle-toc-btn:hover {
    background-color: #51733F;
    color: white;
    transform: translateY(-1px);
    box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.1);
  }
  
  .dark #toggle-toc-btn {
    background-color: #2d3748;
    border-color: #66845A;
    color: #a9c76f;
  }
  
  .dark #toggle-toc-btn:hover {
    background-color: #66845A;
    color: white;
  }
  
  /* Collapsible TOC styling */
  .collapsible-toc {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }
  
  .collapsible-toc:not(.collapsed) {
    max-height: 500px;
  }
  
  /* Fix for the blog content overflow on mobile */
  @media (max-width: 767px) {
    .notebook-page {
      padding: 2rem 0.5rem 3rem; /* Reduce side padding on mobile */
      width: 100%;
      overflow-x: hidden;
    }
    
    .post-content {
      overflow-x: hidden;
      width: 100%;
    }
    
    .post-content :global(pre),
    .post-content :global(code),
    .post-content :global(img),
    .post-content :global(table) {
      max-width: 100%;
      overflow-x: auto;
    }
  }
</style>

<script>
  // Initialize everything when the page is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Notes button functionality
    const notesBtn = document.getElementById('notes-btn') as HTMLButtonElement;
    const pageNotes = document.getElementById('page-notes') as HTMLDivElement;
    
    if (notesBtn && pageNotes) {
      notesBtn.addEventListener('click', function() {
        pageNotes.classList.toggle('hidden');
        if (pageNotes.classList.contains('hidden')) {
          notesBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
              <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
            </svg>
            Recipe Notes
          `;
        } else {
          notesBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
              <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
            </svg>
            Hide Notes
          `;
        }
      });
    }
    
    // Add TOC toggle functionality
    const tocButton = document.getElementById('toggle-toc-btn') as HTMLButtonElement;
    const tocContent = document.getElementById('collapsible-toc') as HTMLDivElement;
    
    if (tocButton && tocContent) {
      // Make sure the button is visible
      tocButton.style.display = 'flex';
      
      // Set initial state
      tocContent.style.maxHeight = '0';
      tocContent.classList.add('collapsed');
      
      tocButton.addEventListener('click', function() {
        const isCollapsed = tocContent.classList.contains('collapsed');
        
        if (isCollapsed) {
          // Expand
          tocContent.classList.remove('collapsed');
          tocContent.style.maxHeight = tocContent.scrollHeight + 'px';
          tocButton.innerHTML = `
            Hide Contents
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M7.646 4.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 5.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z"/>
            </svg>
          `;
        } else {
          // Collapse
          tocContent.classList.add('collapsed');
          tocContent.style.maxHeight = '0';
          tocButton.innerHTML = `
            Show Contents
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
            </svg>
          `;
        }
      });
    }

    // Fix mobile overflow issues
    const fixOverflow = () => {
      const contentElements = document.querySelectorAll('pre, code, table, img');
      contentElements.forEach(el => {
        const htmlEl = el as HTMLElement;
        htmlEl.style.maxWidth = '100%';
        if (el.tagName.toLowerCase() !== 'img') {
          htmlEl.style.overflowX = 'auto';
        }
      });
      
      // Ensure main content containers don't overflow
      const containers = document.querySelectorAll('.post-content, .notebook-page');
      containers.forEach(container => {
        const containerEl = container as HTMLElement;
        containerEl.style.overflowX = 'hidden';
        containerEl.style.width = '100%';
      });
    };
    
    // Run initially and after any resize
    fixOverflow();
    window.addEventListener('resize', fixOverflow);
  });
</script>