---
import "../styles/global.css";
import NavBar from "@components/layout/NavBar.astro";
import CoverPage from "@components/layout/CoverPage.astro";
import Footer from "@components/layout/Footer.astro";
import PrivacyBanner from "@components/items/PrivacyBanner.astro";

export interface Props {
  title: string;
  desc?: string;
  keywords?: string;
  metaImage?: string;
  pubDate?: Date;
  tags?: string[];
}

let { title, desc, metaImage, keywords, tags = [], pubDate = null } = Astro.props;
if (!title) title = "chiso";
if (!desc) desc = "Learning, exploring and making software I'd use.";
if (!metaImage) metaImage = "/images/meta.png";
if (!keywords) keywords = "chiso, raeeceip, chiso, osasona, go, typescript, javascript, rust, gleam, software, engineer";
---

<!doctype html>
<html lang="en">
  <head>
<!-- Replace the existing meta tags in your src/layouts/Layout.astro file with these -->

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<!-- Updated theme color to match notebook theme -->
<meta name="theme-color" content="#51733F" />
<meta name="description" content={desc} />
<meta name="keywords" content={keywords} />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:site_name" content="Chiso's Notebook" />
<meta property="og:url" content={`https://chiso.fly.dev${Astro.url.pathname}`} />
<meta property="og:title" content={title} />
<meta property="og:description" content={desc} />
<meta property="og:image" content="https://chiso.fly.dev/images/notebook-meta.png" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content="Chiso's notebook with handwritten name Chibogu Chisom Raphael" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={`https://chiso.fly.dev${Astro.url.pathname}`} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={desc} />
<meta property="twitter:image" content="https://chiso.fly.dev/images/notebook-meta.png" />

{!!pubDate ? <meta property="article:published_time" content={pubDate.toISOString()} /> : null}
{tags?.map((tag) => <meta property="article:tag" content={tag} />)}

    <script src="/vendor/alpine-persist.js" defer is:inline></script>
    <script src="/vendor/alpine.js" defer is:inline></script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4414445126244161"
     crossorigin="anonymous"></script>

    <!-- Section header click handling -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const headers = document.querySelectorAll("[data-section-header]");
        if (headers?.length > 1) {
          headers.forEach((header) => {
            header?.addEventListener("click", () => {
              const slug = header.id;
              const url = window.location.protocol + "//" + window.location.host + window.location.pathname;
              const hash = `#${slug}`;
              const fullUrl = `${url}${hash}`;

              navigator.clipboard.writeText(fullUrl);
              window.location.hash = slug;
            });
          });
        }
      });
    </script>

    <title>{title}</title>
  </head>
  <body>
    <!-- Cover page component -->
    <CoverPage />
    
    <!-- Enhanced notebook container for page transitions -->
    <div class="notebook-container" id="notebook-container">
      <NavBar />
      <div class="notebook-content" id="notebook-content">
        <div class="page-corner-fold"></div>
        <slot />
      </div>
      <Footer />
      <PrivacyBanner />
    </div>
    
    <script is:inline>
      // Page transition handling with optimized cover animation
      document.addEventListener('DOMContentLoaded', function() {
        // Store the current page URL to detect navigation
        let currentPage = window.location.pathname;
        
        // Check if this is the first visit to the site
        const isFirstVisit = !localStorage.getItem('visited');
        
        // Mark as visited immediately to avoid cover animation on reload
        if (isFirstVisit) {
          localStorage.setItem('visited', 'true');
          // Cover animation will play naturally from CSS
        } else {
          // If not first visit, remove the cover and spine immediately
          const cover = document.getElementById('notebook-cover');
          const spine = document.getElementById('notebook-spine');
          if (cover) cover.remove();
          if (spine) spine.remove();
        }
        
        // Handle internal links for page transitions
        document.addEventListener('click', function(e) {
          // Find closest anchor tag
          const link = e.target.closest('a');
          
          // Only handle internal links within the same domain
          if (link && 
              link.href && 
              link.href.startsWith(window.location.origin) && 
              !link.hasAttribute('data-no-transition') &&
              link.href !== window.location.href &&
              !e.ctrlKey && !e.metaKey) {
            
            e.preventDefault();
            const notebookContent = document.getElementById('notebook-content');
            
            // Initiate page exit animation
            notebookContent.classList.add('page-exit');
            
            // Wait for the animation to complete, then navigate
            setTimeout(() => {
              window.location.href = link.href;
            }, 400); // Faster transition
          }
        });
        
        // Handle page loads (back/forward navigation or new page)
        window.addEventListener('pageshow', function(e) {
          // Check if this is a new navigation (not back/forward from cache)
          if (currentPage !== window.location.pathname) {
            const notebookContent = document.getElementById('notebook-content');
            
            // Add the enter animation class
            notebookContent.classList.add('page-enter');
            
            // Remove the class after animation completes
            setTimeout(() => {
              notebookContent.classList.remove('page-enter');
            }, 400); // Faster transition
            
            // Update current page
            currentPage = window.location.pathname;
          }
        });
        
        // For initial page load, only animate content if not first visit 
        if (!isFirstVisit) {
          const notebookContent = document.getElementById('notebook-content');
          notebookContent.classList.add('page-enter');
          
          // Remove the class after animation completes
          setTimeout(() => {
            notebookContent.classList.remove('page-enter');
          }, 400); // Faster transition
        }
        
        // Handle navigation events
        window.onpopstate = function(event) {
          // When navigating with browser back/forward buttons
          const notebookContent = document.getElementById('notebook-content');
          if (notebookContent) {
            notebookContent.classList.add('page-enter');
            setTimeout(() => {
              notebookContent.classList.remove('page-enter');
            }, 400); // Faster transition
          }
        };
      });
    </script>
  </body>
</html>